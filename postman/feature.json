{
	"info": {
		"_postman_id": "1cdba59d-cbbb-48b7-99b1-f7b64a962de8",
		"name": "feature_comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32604822"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Добавление нового пользователя id=136",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const respBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователи должны содержать поля: id, name, email\", function () {\r",
									"    pm.expect(respBody).to.have.property('id');\r",
									"    pm.expect(respBody).to.have.property('name');\r",
									"    pm.expect(respBody).to.have.property('email');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"example@email.com\",\r\n  \"name\": \"Jon Cast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового пользователя id=137",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const respBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователи должны содержать поля: id, name, email\", function () {\r",
									"    pm.expect(respBody).to.have.property('id');\r",
									"    pm.expect(respBody).to.have.property('name');\r",
									"    pm.expect(respBody).to.have.property('email');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"jane.doe@example.com\",\r\n  \"name\": \"Jane Doe\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового пользователя id=138",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const respBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователи должны содержать поля: id, name, email\", function () {\r",
									"    pm.expect(respBody).to.have.property('id');\r",
									"    pm.expect(respBody).to.have.property('name');\r",
									"    pm.expect(respBody).to.have.property('email');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\": \"example@example.com\",\r\n\"name\": \"Kitty West\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Category",
			"item": [
				{
					"name": "Добавление новой категории",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const respBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователи должны содержать поля: id, name, email\", function () {\r",
									"    pm.expect(respBody).to.have.property('id');\r",
									"    pm.expect(respBody).to.have.property('name');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"walk\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Создание нового события id=104 с модерацией",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"annotation\": \"This is a sample annotation with a length between 20 and 2000 characters.\",\r\n  \"category\": 121,\r\n  \"description\": \"This is a sample description with a length between 20 and 7000 characters.\",\r\n  \"eventDate\": \"2025-10-14 12:00:00\",\r\n  \"location\": {\r\n    \"lat\": 0.0,\r\n    \"lon\": 0.0\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 100,\r\n  \"requestModeration\": true,\r\n  \"title\": \"Sample Event Title\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/136/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"136",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание нового события id=105 без модерации",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"annotation\": \"This is a sample annotation with a length between 20 and 2000 characters.\",\r\n  \"category\": 121,\r\n  \"description\": \"This is a sample description with a length between 20 and 7000 characters.\",\r\n  \"eventDate\": \"2025-07-14 12:00:00\",\r\n  \"location\": {\r\n    \"lat\": 0.0,\r\n    \"lon\": 0.0\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 100,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Sample Event Title\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/137/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"137",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Подтверждение события id=104",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"annotation\": \"This is a sample event annotation with a minimum length of 20 characters.\",\r\n  \"category\": \"\",\r\n  \"description\": \"This is a sample event description with a minimum length of 20 characters and a maximum length of 7000 characters.\",\r\n  \"eventDate\": \"\",\r\n  \"location\": {\r\n \"lat\": \"456\",\r\n \"lon\": \"456\"\r\n  },\r\n  \"paid\": \"\",\r\n  \"participantLimit\": \"100\",\r\n  \"requestModeration\": \"true\",\r\n  \"stateAction\": \"PUBLISH_EVENT\",\r\n  \"title\": \"Sample Event Title\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/events/104",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"104"
							]
						}
					},
					"response": []
				},
				{
					"name": "Подтверждение публикации события id=105",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"annotation\": \"This is a sample event annotation with a minimum length of 20 characters.\",\r\n  \"category\": \"\",\r\n  \"description\": \"This is a sample event description with a minimum length of 20 characters and a maximum length of 7000 characters.\",\r\n  \"eventDate\": \"\",\r\n  \"location\": {\r\n \"lat\": \"456\",\r\n \"lon\": \"456\"\r\n  },\r\n  \"paid\": \"\",\r\n  \"participantLimit\": \"100\",\r\n  \"requestModeration\": \"false\",\r\n  \"stateAction\": \"PUBLISH_EVENT\",\r\n  \"title\": \"Sample Event Title\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/events/105",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"105"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Create comments",
					"item": [
						{
							"name": "Создание комментария для события с id=1 UserId=1, EventId=2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const respBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(respBody.id).to.not.be.null;\r",
											"    pm.expect(respBody.state).equal('PUBLISHED', 'Статус должен быть PENDING');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"value\": \"This is a one comment.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comment/user/136/event/105",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"user",
										"136",
										"event",
										"105"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание комментария id=2 UserId=137, EventId=104",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const respBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(respBody.id).to.not.be.null;\r",
											"    pm.expect(respBody.state).equal('PENDING', 'Статус должен быть PENDING');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"value\": \"This is a two comment.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comment/user/137/event/104",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"user",
										"137",
										"event",
										"104"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание нового комментария id=3 UserId=138, EventId=104",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const respBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(respBody.id).to.not.be.null;\r",
											"    pm.expect(respBody.state).equal('PENDING', 'Статус должен быть PENDING');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"value\": \"This is a three comment.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comment/user/138/event/104",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"user",
										"138",
										"event",
										"104"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание комментария id=4 userId=136, EventId=104",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const respBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(respBody.id).to.not.be.null;\r",
											"    pm.expect(respBody.state).equal('PUBLISHED', 'Статус должен быть PUBLISHED');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"value\": \"This is a four comment.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comment/user/136/event/104",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"user",
										"136",
										"event",
										"104"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Bad request create comments",
					"item": [
						{
							"name": "Создание комментария c отрицательным userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"value\": \"This is a five comment.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comment/user/-1/event/105",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"user",
										"-1",
										"event",
										"105"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание комментария c пустым текстом",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"value\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comment/user/136/event/105",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"user",
										"136",
										"event",
										"105"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание комментария c отрицательным eventId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"value\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comment/user/136/event/-1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"user",
										"136",
										"event",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание комментария c value<3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"value\": \"no\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comment/user/136/event/105",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"user",
										"136",
										"event",
										"105"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание комментария c value<2000",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"value\": \"Test text for Postman. This text is intended for testing the API and other functions in Postman. It contains exactly 2,050 characters, including spaces and punctuation marks. The text consists of short sentences that are easy to read and understand. Postman is a popular API testing application. It allows you to send HTTP requests, view responses, save frequently used requests, and much more. Postman simplifies the API development and testing process. The test text includes various symbols such as letters of the Latin and Russian alphabets, numbers, punctuation marks and special characters. This helps to make sure that the API handles different types of data correctly. The text consists of short sentences to make it easy to read and understand. It does not contain complex or long phrases. Each sentence begins with a capital letter and ends with a period. Postman is a powerful API testing tool. It allows you to create complex queries, including authentication, parameters, and headers. Postman also supports testing multiple queries in a single collection. The test text can be used to test various aspects of the API, such as speed limitation, error handling, and performance. It can also be used to test API integration with other systems. Postman provides a user-friendly interface for working with the API. It includes features such as automatic code completion, syntax highlighting, and response preview. Postman also supports working with variables and scripts. The test text can be used to test various API types such as REST, SOAP, and GraphQL. It can also be used to test APIs that return various data formats such as JSON, XML, and HTML. Postman is an indispensable tool for API developers. It simplifies the API testing and debugging process, saving time and effort. Postman also supports teamwork, which allows multiple developers to work together on the API. The test text can be used to test various API usage scenarios, such as creating, reading, updating, and deleting data. It can also be used to test APIs that require authentication and authorization. Postman provides many API testing capabilities such as test automation, report generation, and integration with continuous integration systems. It also supports working with environment variables and global variables. The test text can be used to test APIs that return large amounts of data. It can also be used to test APIs that require uploading files or sending data in multipart/form-data format. Postman is a free and open source application. It is available for Windows, macOS and Linux. Postman also offers paid plans with additional features for teams and businesses. The test text can be used to test APIs that return errors or exceptions. It can also be used to test APIs that require processing large amounts of data. Postman provides many API features such as code generation, debugging, and monitoring. It also supports working with various authentication formats such as OAuth 2.0, API keys, and basic authentication. The test text can be used to test APIs that return real-time data. It can also be used to test APIs that require processing large volumes of requests. Postman is an indispensable tool for API developers. It simplifies the API testing and debugging process, saving time and effort. Postman also supports teamwork, which allows multiple developers to work together on the API.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comment/user/136/event/105",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"user",
										"136",
										"event",
										"105"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Not found create comments",
					"item": [
						{
							"name": "Создание комментария c несуществующим user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"value\": \"This is a five comment.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comment/user/999/event/2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"user",
										"999",
										"event",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание комментария c несуществующим event",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"value\": \"This is a five comment.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comment/user/136/event/999",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"user",
										"136",
										"event",
										"999"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get comments",
					"item": [
						{
							"name": "Получение комментария",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/comment/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение не существующего комментария",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/comment/54",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"54"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение комментария с отрицательным eventId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/comment/-2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"-2"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get all comments",
					"item": [
						{
							"name": "Получение всех комментариев",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const respBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Колличество пользователей не должно быть меньше 1\", function () {\r",
											"    pm.expect(respBody).is.an('array');\r",
											"    pm.expect(respBody.length).to.be.above(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/comment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update comments",
					"item": [
						{
							"name": "Обновление комментария id=2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const respBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Статус должен быть PENDING\", function () {\r",
											"    pm.expect(respBody.id).to.not.be.null;\r",
											"    pm.expect(respBody.state).equal('PENDING', 'Статус должен быть PENDING');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"value\": \"This is a two update comment.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comment/2/user/137",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"2",
										"user",
										"137"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление комментария id=2 c пустым текстом",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"value\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comment/2/user/137",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"2",
										"user",
										"137"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление комментария id=2 текст<3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"value\": \"no\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comment/2/user/137",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"2",
										"user",
										"137"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление комментария id=2 c текст>2000",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"value\": \"Test text for Postman. This text is intended for testing the API and other functions in Postman. It contains exactly 2,050 characters, including spaces and punctuation marks. The text consists of short sentences that are easy to read and understand. Postman is a popular API testing application. It allows you to send HTTP requests, view responses, save frequently used requests, and much more. Postman simplifies the API development and testing process. The test text includes various symbols such as letters of the Latin and Russian alphabets, numbers, punctuation marks and special characters. This helps to make sure that the API handles different types of data correctly. The text consists of short sentences to make it easy to read and understand. It does not contain complex or long phrases. Each sentence begins with a capital letter and ends with a period. Postman is a powerful API testing tool. It allows you to create complex queries, including authentication, parameters, and headers. Postman also supports testing multiple queries in a single collection. The test text can be used to test various aspects of the API, such as speed limitation, error handling, and performance. It can also be used to test API integration with other systems. Postman provides a user-friendly interface for working with the API. It includes features such as automatic code completion, syntax highlighting, and response preview. Postman also supports working with variables and scripts. The test text can be used to test various API types such as REST, SOAP, and GraphQL. It can also be used to test APIs that return various data formats such as JSON, XML, and HTML. Postman is an indispensable tool for API developers. It simplifies the API testing and debugging process, saving time and effort. Postman also supports teamwork, which allows multiple developers to work together on the API. The test text can be used to test various API usage scenarios, such as creating, reading, updating, and deleting data. It can also be used to test APIs that require authentication and authorization. Postman provides many API testing capabilities such as test automation, report generation, and integration with continuous integration systems. It also supports working with environment variables and global variables. The test text can be used to test APIs that return large amounts of data. It can also be used to test APIs that require uploading files or sending data in multipart/form-data format. Postman is a free and open source application. It is available for Windows, macOS and Linux. Postman also offers paid plans with additional features for teams and businesses. The test text can be used to test APIs that return errors or exceptions. It can also be used to test APIs that require processing large amounts of data. Postman provides many API features such as code generation, debugging, and monitoring. It also supports working with various authentication formats such as OAuth 2.0, API keys, and basic authentication. The test text can be used to test APIs that return real-time data. It can also be used to test APIs that require processing large volumes of requests. Postman is an indispensable tool for API developers. It simplifies the API testing and debugging process, saving time and effort. Postman also supports teamwork, which allows multiple developers to work together on the API.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comment/2/user/137",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"2",
										"user",
										"137"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление комментария id=2 другим пользователем",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"value\": \"This is a two update comment.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/comment/2/user/3",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"2",
										"user",
										"3"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Сonfirmation of the status by the administrator",
					"item": [
						{
							"name": "Получение Event id=1 с одним комментарием",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const respBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Должен быть один опубликованный комментарий\", function () {\r",
											"    pm.expect(respBody.comments.length).to.equals(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/104",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"104"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение комментария до модерации",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"const respBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(respBody.id).to.not.be.null;\r",
											"    pm.expect(respBody.state).equal('PENDING', 'Статус должен быть PENDING');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/comment/2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление комментария id=2 Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const respBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(respBody.id).to.not.be.null;\r",
											"    pm.expect(respBody.state).equal('PUBLISHED', 'Статус должен быть PUBLISHED');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/2?state=PUBLISHED",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"2"
									],
									"query": [
										{
											"key": "state",
											"value": "PUBLISHED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление комментария id=4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const respBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(respBody.id).to.not.be.null;\r",
											"    pm.expect(respBody.state).equal('CANCELED', 'Статус должен быть CANCELED');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/3?state=CANCELED",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"3"
									],
									"query": [
										{
											"key": "state",
											"value": "CANCELED"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение комментария после модерации",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"const respBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(respBody.id).to.not.be.null;\r",
											"    pm.expect(respBody.state).equal('PUBLISHED', 'Статус должен быть PUBLISHED');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/comment/2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение Event id=1 с двумя комментариями",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const respBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Должен быть один опубликованный комментарий\", function () {\r",
											"    pm.expect(respBody.comments.length).to.equals(2);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/104",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"104"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete comments",
					"item": [
						{
							"name": "Удаление комментария другим пользователем",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/comment/3/user/2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"3",
										"user",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление не существующего комментария",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/comment/6/user/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"6",
										"user",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария самим пользователем",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 204 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/comment/3/user/136",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"3",
										"user",
										"136"
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария создателем события",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 204 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/comment/2/user/136",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comment",
										"2",
										"user",
										"136"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}